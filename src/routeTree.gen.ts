/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedSearchRouteImport } from './routes/_authenticated/search'
import { Route as AuthenticatedPodcastsIndexRouteImport } from './routes/_authenticated/podcasts/index'
import { Route as AuthenticatedPlaylistsIndexRouteImport } from './routes/_authenticated/playlists/index'
import { Route as AuthenticatedArtistsIndexRouteImport } from './routes/_authenticated/artists/index'
import { Route as AuthenticatedAlbumsIndexRouteImport } from './routes/_authenticated/albums/index'
import { Route as AuthenticatedPodcastsPodcastIdRouteImport } from './routes/_authenticated/podcasts/$podcastId'
import { Route as AuthenticatedPlaylistsPlaylistIdRouteImport } from './routes/_authenticated/playlists/$playlistId'
import { Route as AuthenticatedArtistsArtistIdRouteImport } from './routes/_authenticated/artists/$artistId'
import { Route as AuthenticatedAlbumsAlbumIdRouteImport } from './routes/_authenticated/albums/$albumId'

const AuthenticatedNowPlayingLazyRouteImport = createFileRoute(
  '/_authenticated/now-playing',
)()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/_authenticated/route.lazy').then((d) => d.Route),
)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedNowPlayingLazyRoute =
  AuthenticatedNowPlayingLazyRouteImport.update({
    id: '/now-playing',
    path: '/now-playing',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/now-playing.lazy').then((d) => d.Route),
  )
const AuthenticatedSearchRoute = AuthenticatedSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/search.lazy').then((d) => d.Route),
)
const AuthenticatedPodcastsIndexRoute =
  AuthenticatedPodcastsIndexRouteImport.update({
    id: '/podcasts/',
    path: '/podcasts/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/podcasts/index.lazy').then((d) => d.Route),
  )
const AuthenticatedPlaylistsIndexRoute =
  AuthenticatedPlaylistsIndexRouteImport.update({
    id: '/playlists/',
    path: '/playlists/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/playlists/index.lazy').then((d) => d.Route),
  )
const AuthenticatedArtistsIndexRoute =
  AuthenticatedArtistsIndexRouteImport.update({
    id: '/artists/',
    path: '/artists/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/artists/index.lazy').then((d) => d.Route),
  )
const AuthenticatedAlbumsIndexRoute =
  AuthenticatedAlbumsIndexRouteImport.update({
    id: '/albums/',
    path: '/albums/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/albums/index.lazy').then((d) => d.Route),
  )
const AuthenticatedPodcastsPodcastIdRoute =
  AuthenticatedPodcastsPodcastIdRouteImport.update({
    id: '/podcasts/$podcastId',
    path: '/podcasts/$podcastId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/podcasts/$podcastId.lazy').then(
      (d) => d.Route,
    ),
  )
const AuthenticatedPlaylistsPlaylistIdRoute =
  AuthenticatedPlaylistsPlaylistIdRouteImport.update({
    id: '/playlists/$playlistId',
    path: '/playlists/$playlistId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/playlists/$playlistId.lazy').then(
      (d) => d.Route,
    ),
  )
const AuthenticatedArtistsArtistIdRoute =
  AuthenticatedArtistsArtistIdRouteImport.update({
    id: '/artists/$artistId',
    path: '/artists/$artistId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/artists/$artistId.lazy').then(
      (d) => d.Route,
    ),
  )
const AuthenticatedAlbumsAlbumIdRoute =
  AuthenticatedAlbumsAlbumIdRouteImport.update({
    id: '/albums/$albumId',
    path: '/albums/$albumId',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/albums/$albumId.lazy').then((d) => d.Route),
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/search': typeof AuthenticatedSearchRoute
  '/now-playing': typeof AuthenticatedNowPlayingLazyRoute
  '/albums/$albumId': typeof AuthenticatedAlbumsAlbumIdRoute
  '/artists/$artistId': typeof AuthenticatedArtistsArtistIdRoute
  '/playlists/$playlistId': typeof AuthenticatedPlaylistsPlaylistIdRoute
  '/podcasts/$podcastId': typeof AuthenticatedPodcastsPodcastIdRoute
  '/albums': typeof AuthenticatedAlbumsIndexRoute
  '/artists': typeof AuthenticatedArtistsIndexRoute
  '/playlists': typeof AuthenticatedPlaylistsIndexRoute
  '/podcasts': typeof AuthenticatedPodcastsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/search': typeof AuthenticatedSearchRoute
  '/now-playing': typeof AuthenticatedNowPlayingLazyRoute
  '/albums/$albumId': typeof AuthenticatedAlbumsAlbumIdRoute
  '/artists/$artistId': typeof AuthenticatedArtistsArtistIdRoute
  '/playlists/$playlistId': typeof AuthenticatedPlaylistsPlaylistIdRoute
  '/podcasts/$podcastId': typeof AuthenticatedPodcastsPodcastIdRoute
  '/albums': typeof AuthenticatedAlbumsIndexRoute
  '/artists': typeof AuthenticatedArtistsIndexRoute
  '/playlists': typeof AuthenticatedPlaylistsIndexRoute
  '/podcasts': typeof AuthenticatedPodcastsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/search': typeof AuthenticatedSearchRoute
  '/_authenticated/now-playing': typeof AuthenticatedNowPlayingLazyRoute
  '/_authenticated/albums/$albumId': typeof AuthenticatedAlbumsAlbumIdRoute
  '/_authenticated/artists/$artistId': typeof AuthenticatedArtistsArtistIdRoute
  '/_authenticated/playlists/$playlistId': typeof AuthenticatedPlaylistsPlaylistIdRoute
  '/_authenticated/podcasts/$podcastId': typeof AuthenticatedPodcastsPodcastIdRoute
  '/_authenticated/albums/': typeof AuthenticatedAlbumsIndexRoute
  '/_authenticated/artists/': typeof AuthenticatedArtistsIndexRoute
  '/_authenticated/playlists/': typeof AuthenticatedPlaylistsIndexRoute
  '/_authenticated/podcasts/': typeof AuthenticatedPodcastsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/search'
    | '/now-playing'
    | '/albums/$albumId'
    | '/artists/$artistId'
    | '/playlists/$playlistId'
    | '/podcasts/$podcastId'
    | '/albums'
    | '/artists'
    | '/playlists'
    | '/podcasts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/search'
    | '/now-playing'
    | '/albums/$albumId'
    | '/artists/$artistId'
    | '/playlists/$playlistId'
    | '/podcasts/$podcastId'
    | '/albums'
    | '/artists'
    | '/playlists'
    | '/podcasts'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/search'
    | '/_authenticated/now-playing'
    | '/_authenticated/albums/$albumId'
    | '/_authenticated/artists/$artistId'
    | '/_authenticated/playlists/$playlistId'
    | '/_authenticated/podcasts/$podcastId'
    | '/_authenticated/albums/'
    | '/_authenticated/artists/'
    | '/_authenticated/playlists/'
    | '/_authenticated/podcasts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/now-playing': {
      id: '/_authenticated/now-playing'
      path: '/now-playing'
      fullPath: '/now-playing'
      preLoaderRoute: typeof AuthenticatedNowPlayingLazyRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/search': {
      id: '/_authenticated/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AuthenticatedSearchRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/podcasts/': {
      id: '/_authenticated/podcasts/'
      path: '/podcasts'
      fullPath: '/podcasts'
      preLoaderRoute: typeof AuthenticatedPodcastsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/playlists/': {
      id: '/_authenticated/playlists/'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof AuthenticatedPlaylistsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/artists/': {
      id: '/_authenticated/artists/'
      path: '/artists'
      fullPath: '/artists'
      preLoaderRoute: typeof AuthenticatedArtistsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/albums/': {
      id: '/_authenticated/albums/'
      path: '/albums'
      fullPath: '/albums'
      preLoaderRoute: typeof AuthenticatedAlbumsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/podcasts/$podcastId': {
      id: '/_authenticated/podcasts/$podcastId'
      path: '/podcasts/$podcastId'
      fullPath: '/podcasts/$podcastId'
      preLoaderRoute: typeof AuthenticatedPodcastsPodcastIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/playlists/$playlistId': {
      id: '/_authenticated/playlists/$playlistId'
      path: '/playlists/$playlistId'
      fullPath: '/playlists/$playlistId'
      preLoaderRoute: typeof AuthenticatedPlaylistsPlaylistIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/artists/$artistId': {
      id: '/_authenticated/artists/$artistId'
      path: '/artists/$artistId'
      fullPath: '/artists/$artistId'
      preLoaderRoute: typeof AuthenticatedArtistsArtistIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/albums/$albumId': {
      id: '/_authenticated/albums/$albumId'
      path: '/albums/$albumId'
      fullPath: '/albums/$albumId'
      preLoaderRoute: typeof AuthenticatedAlbumsAlbumIdRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedSearchRoute: typeof AuthenticatedSearchRoute
  AuthenticatedNowPlayingLazyRoute: typeof AuthenticatedNowPlayingLazyRoute
  AuthenticatedAlbumsAlbumIdRoute: typeof AuthenticatedAlbumsAlbumIdRoute
  AuthenticatedArtistsArtistIdRoute: typeof AuthenticatedArtistsArtistIdRoute
  AuthenticatedPlaylistsPlaylistIdRoute: typeof AuthenticatedPlaylistsPlaylistIdRoute
  AuthenticatedPodcastsPodcastIdRoute: typeof AuthenticatedPodcastsPodcastIdRoute
  AuthenticatedAlbumsIndexRoute: typeof AuthenticatedAlbumsIndexRoute
  AuthenticatedArtistsIndexRoute: typeof AuthenticatedArtistsIndexRoute
  AuthenticatedPlaylistsIndexRoute: typeof AuthenticatedPlaylistsIndexRoute
  AuthenticatedPodcastsIndexRoute: typeof AuthenticatedPodcastsIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedSearchRoute: AuthenticatedSearchRoute,
  AuthenticatedNowPlayingLazyRoute: AuthenticatedNowPlayingLazyRoute,
  AuthenticatedAlbumsAlbumIdRoute: AuthenticatedAlbumsAlbumIdRoute,
  AuthenticatedArtistsArtistIdRoute: AuthenticatedArtistsArtistIdRoute,
  AuthenticatedPlaylistsPlaylistIdRoute: AuthenticatedPlaylistsPlaylistIdRoute,
  AuthenticatedPodcastsPodcastIdRoute: AuthenticatedPodcastsPodcastIdRoute,
  AuthenticatedAlbumsIndexRoute: AuthenticatedAlbumsIndexRoute,
  AuthenticatedArtistsIndexRoute: AuthenticatedArtistsIndexRoute,
  AuthenticatedPlaylistsIndexRoute: AuthenticatedPlaylistsIndexRoute,
  AuthenticatedPodcastsIndexRoute: AuthenticatedPodcastsIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
